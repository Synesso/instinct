#summary Introduction to Behaviour Driven Development (BDD) with Instinct
#labels Tutorial

= Introduction =

*This tutorial is a work in progress*

This tutorial gives a simple introduction to Instinct. The examples for this tutorial come from the [http://instinct.googlecode.com/svn/trunk/instinct-example/ example project], full details are available there. The tutorial assumes you have [http://code.google.com/p/instinct/downloads/list downloaded] Instinct. Details on terminology are available on the [Terminology terminology page].

Instinct is oriented around specifications of behaviour (specifications or specs), that is, you expect the object under test (the subject) to behave in a certain manner. Instinct allows you to specify that in the same way as traditional unit testing frameworks such as JUnit.

Specifications are the methods that invoke the object under test (the test subject) and verify its behaviour. They are equivalent to JUnit test methods. Behaviour contexts give you a way of grouping specifications that operate within a common context together. For example, a stack object may have many different states, empty, full, half-full, etc. You could think of specifications as needing a context in which to run, where the behaviour only makes sense in that context. Each behaviour context should represent a particular context of the test subject, like the full stack example from above. You are encouraged to use more than one behaviour context per test subject, perhaps even within the same class file.

Behaviour contexts and specifications should be named so that when read together they form a description of what the specification is attempting to achieve. Consider the following methods and their derived descriptions:

  * `AnEmptyStack.mustBeEmpty()` - An empty stack must be empty;
  * `AnEmptyStack.mustNoLongerBeEmptyAfterPush()` - An empty stack must no longer be empty after push;
  * `AFullStack.mustNoLongerBeFullAfterPop()` - A full stack must no longer be full after pop.

Choosing good names for specifications allows their meaning to be discovered without having to parse the method content.

= Writing A Specification =

Specifications are simply methods contained within a class. In order to run a specification, you must mark it in a manner so that Instinct can find it. Currently Instinct supports marked objects using Java 1.5 annotations.

Instinct supports the following annotations:

  * BehaviourContext - Marks a class as being a behaviour context.
  * Specification - Marks a method as being a specification.
  * BeforeSpecification - .
  * AfterSpecification - .



TODO Finish this.


{{{
import com.googlecode.instinct.core.annotate.BeforeSpecification;
import com.googlecode.instinct.core.annotate.BehaviourContext;
import com.googlecode.instinct.core.annotate. Specification;
import static com.googlecode.instinct.verify.Verify.mustBeFalse;
import static com.googlecode.instinct.verify.Verify.mustBeTrue;

@BehaviourContext
public final class AnEmptyStack {
    private Stack stack;

    @BeforeSpecification
    void setUp() {
        stack = new StackImpl();
    }

    @Specification
    void mustBeEmpty() {
        mustBeTrue(stack.isEmpty());
    }

    @Specification
    void mustNoLongerBeEmptyAfterPush() {
        stack.push(new Object());
        mustBeFalse(stack.isEmpty());
    }
}
}}}

= Specification Lifecycle =

TODO - before spec, after spec. Talk about the way in which tests are executed (the algorithm from the specification runner). Rules around what will and won't be executed, incl. methods & constructors.

= Mocking =

TODO - talk about how to use the integrated mocking framework. When implemented, discuss the automocking.

= Verifying Behaviour =

TODO - talk about Verify.

= Integrating with Ant =

Instinct comes with an Ant task (for which you'll need the main Ant 1.7.0 Jar in your classpath).

  # Download Instinct.
  # Add the Instinct Jar and required libraries to your classpath
  # Create a target for Instinct that runs after your main code and specification code is compiled.
  # Within this target, define the Instinct task so that Ant can see it.
  # Within this target, run the Instinct task, pointing it at the directory containing the (compiled) specification classes.

The following sections take you through these steps in detail.

== Add Required Libraries to the Classpath ==

Before the Ant task can be run, you will need to define a classpath so that Instinct can find your classes and the classes it needs to run. The classes that will go into this classpath will include any classes your specifications will access (such as the production code under scrutiny, libraries used, etc.) as well as libraries required by Instinct. Details for what libraries are required when can be found in the [http://instinct.googlecode.com/svn/trunk/instinct-core/README project readme]. The following example is the minimal set required for running from Ant.

{{{
<path id="spec.class.path">
    <path refid="main.class.path"/>
    <fileset dir="${basedir}">
        <include name="${lib.dir}/instinct-0.0.1.jar"/>
        <include name="${lib.dir}/boost-982.jar"/>
        <include name="${lib.dir}/cglib-nodep-2.2_beta1.jar"/>
        <include name="${lib.dir}/jmock-1.1.0.jar"/>
        <include name="${lib.dir}/jmock-cglib-1.1.0.jar"/>
        <include name="${lib.dir}/easymockclassextension-2.2.jar"/>
        <include name="${lib.dir}/ant-1.7.0.jar"/>
    </fileset>
    <pathelement location="${spec.classes.dir}"/>
</path>
}}}

== Using the Instinct Ant Task ==

In order to use the Instinct task, you first need to make it available to Ant, using the [http://ant.apache.org/manual/CoreTasks/taskdef.html taskdef] element.

{{{
<taskdef name="instinct" classname="com.googlecode.instinct.integrate.ant.InstinctAntTask" classpathref="spec.class.path"/>
}}}

You can also use the resource form of the taskdef element:

{{{
<taskdef resource="instincttask.properties" classpathref="spec.class.path"/>
}}}

After defining the task, use the `instinct` task to run your specifications:

{{{
<instinct failureproperty="specs-failed">
    <specifications dir="${spec.classes.dir}"/>
    <formatter type="verbose"/>
</instinct>
}}}

The elements used in the `instinct` task are as follows:

  * Element {{{instinct}}} - The Instinct Ant task.
    * Attribute {{{failureproperty}}} - The name of the property to set if any specifications fail. You need to combine this with a {{{<fail/>}}} element if you want the build to fail when a test fails (see the complete example below for details).
  * Element {{{specifications}}} - This element tells Instinct how to find the specifications to run. Specifications are currently found based on annotations. You can have as many `specifications` as you like, Instinct will search them all for specifications to run. This is useful if you keep your specifications in different source trees.
    * Attribute {{{dir}}} - The directory containing the (compiled) specification classes. This is the root directory of the package containing the specifications.
  * Element {{{formatter}}} - Tells Instinct how to format the results of the specifications it runs. You can only specify one formatter for each `instinct` task.
    * Attribute {{{type}}} - The type of output format to use. Supported output formats are "brief" and "verbose". The brief formatter displays the results of behaviour context on on a single line, with a summary of all the contained specifications. The verbose formatter displays a summary of each context on one line (similar to the brief formatter), followed by details of each of the contained specifications. Failures include the full stack trace of the failure, making output quite verbose.

Example of brief output:

{{{
[instinct] Behaviour context: AFullStack, Specifications run: 1, Successes: 1, Failures: 0, Time elapsed: 0.0050 seconds
}}}

Example of verbose output:

{{{
Behaviour context: AFullStack, Specifications run: 1, Successes: 1, Failures: 0, Total time elapsed: 0.0060 seconds
 [instinct]     Specification mustNoLongerBeFullAfterPop, time elapsed: 0.0060 seconds, status: succeeded
 [instinct] Behaviour context: AnEmptyStack, Specifications run: 2, Successes: 1, Failures: 1, Total time elapsed: 0.0010 seconds
 [instinct]     Specification mustBeEmpty, time elapsed: 0.0 seconds, status: succeeded
 [instinct]     Specification mustNoLongerBeEmptyAfterPush, time elapsed: 0.0010 seconds, status: FAILED
 [instinct]     Cause: com.googlecode.instinct.verify.VerificationException: Must be true
 [instinct]             at com.googlecode.instinct.verify.Verify.fail(Verify.java:53)
 [instinct]             at com.googlecode.instinct.verify.Verify.mustBeTrue(Verify.java:41)
 [instinct]             at com.googlecode.instinct.example.ContextExample$AnEmptyStack.mustNoLongerBeEmptyAfterPush(ContextExample.java:48)
 ...
}}}

== Complete Example ==

Here is an example of a build file (build.xml) for a simple project using Instinct.

{{{
<?xml version="1.0" encoding="UTF-8"?>
<project name="instinct-example" default="run-specs" basedir=".">

    <property name="build.dir" value="build"/>
    <property name="lib.dir" value="lib"/>
    <property name="src.dir" value="src"/>

    <property name="main.src.dir" value="${src.dir}/main/java"/>
    <property name="spec.src.dir" value="${src.dir}/spec/java"/>

    <property name="main.classes.dir" value="${build.dir}/main-classes"/>
    <property name="spec.classes.dir" value="${build.dir}/spec-classes"/>

    <path id="main.class.path"/>
    <path id="main.class.path">
        <pathelement location="${main.classes.dir}"/>
    </path>
    <path id="spec.class.path">
        <path refid="main.class.path"/>
        <fileset dir="${basedir}">
            <include name="${lib.dir}/instinct-0.0.1.jar"/>
            <include name="${lib.dir}/boost-982.jar"/>
            <include name="${lib.dir}/cglib-nodep-2.2_beta1.jar"/>
            <include name="${lib.dir}/jmock-1.1.0.jar"/>
            <include name="${lib.dir}/jmock-cglib-1.1.0.jar"/>
            <include name="${lib.dir}/easymockclassextension-2.2.jar"/>
            <include name="${lib.dir}/ant-1.7.0.jar"/>
        </fileset>
        <pathelement location="${spec.classes.dir}"/>
    </path>

    <target name="clean" depends="-clean"/>
    <target name="run-specs" depends="clean,-run-specs"/>

    <target name="-clean">
        <delete dir="${build.dir}"/>
    </target>

    <macrodef name="compile.macro">
        <attribute name="src.dir"/>
        <attribute name="output.dir"/>
        <attribute name="classpath.ref"/>
        <attribute name="src.path"/>
        <sequential>
            <mkdir dir="@{output.dir}"/>
            <javac source="1.5" srcdir="@{src.dir}" destdir="@{output.dir}" classpathref="@{classpath.ref}" debug="true"
                    debuglevel="source,lines,vars" deprecation="false" optimize="true">
                <src>
                    <path path="@{src.path}"/>
                </src>
                <patternset includes="**/*.java"/>
                <compilerarg value="-Xlint"/>
            </javac>
        </sequential>
    </macrodef>

    <target name="-compile">
        <compile.macro src.dir="${main.src.dir}" classpath.ref="main.class.path" output.dir="${main.classes.dir}"
                src.path="${main.src.dir}"/>
        <compile.macro src.dir="${spec.src.dir}" classpath.ref="spec.class.path" output.dir="${spec.classes.dir}"
                src.path="${spec.src.dir}"/>
    </target>

    <target name="-run-specs" depends="-compile">
        <taskdef name="instinct" classname="com.googlecode.instinct.integrate.ant.InstinctAntTask" classpathref="spec.class.path"/>
        <instinct failureproperty="specs-failed">
            <specifications dir="${spec.classes.dir}"/>
            <formatter type="verbose"/>
        </instinct>
        <fail if="specs-failed" message="Specifications failed"/>
    </target>

</project>
}}}