#summary How to create dummies in your specifications
#labels Tutorial

= Specification dummies =

Dummy objects are passed around but never actually used, they are usually used just to fill parameters to simplify specifications (where their behaviour may not be important). Dummies will throw exceptions if methods are called on them. Dummies are the simplest form of specification double implementation.

In Instinct, dummies cannot be primitives, final classes or enums, you should use a [Stub] for these.

Dummies are created in a specification by marking a field in a context with the `@Dummy` annotation or by naming the field with a `dummy` prefix (`^dummy` regex). The following are two examples of a dummy.

Using the annotation:

{{{
@Dummy Object proxy = new Object();
}}}

Using the naming convention:

{{{
Object Proxy dummyProxy = new Object();
}}}

If you don't want Instinct to automatically create dummies for you, you can turn them off:

{{{
@Dummy(auto = false) Object proxy = new Object();
}}}

It is still important to mark the role the (dummy) object plays in the specification, even if you turn of the automatic creation of a value. This helps 

Note that there is no way to disable automatic dummy creation for dummies marked with naming conventions. If you use naming conventions and don't want automatic dummy creation you should rename the field so it does not start with `dummy`.

== Common problems ==

Practically, there are some types that cannot be dummied as they have methods called when 